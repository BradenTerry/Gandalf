using System;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Gandalf.Engine.SourceGenerators
{
    [Generator]
    public class TestServiceProviderIncrementalSourceGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            context.RegisterSourceOutput(
                context.CompilationProvider,
                (spc, compilation) =>
                {
                    // Look for [assembly: TestServiceProvider(ServiceProviderType = typeof(MyProvider))]
                    var testServiceProviderAttr = compilation.Assembly.GetAttributes()
                        .FirstOrDefault(attr => attr.AttributeClass?.ToDisplayString() == "Gandalf.Core.Attributes.TestServiceProviderAttribute");

                    string fullyQualifiedName = null;

                    if (testServiceProviderAttr != null)
                    {
                        // Try to get ServiceProviderType from named arguments
                        var serviceProviderTypeArg = testServiceProviderAttr.NamedArguments
                            .FirstOrDefault(kvp => kvp.Key == "ServiceProviderType").Value;

                        var format = new SymbolDisplayFormat(
                            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces,
                            globalNamespaceStyle: SymbolDisplayGlobalNamespaceStyle.Included,
                            miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes);

                        // Fallback to constructor argument if not found as named argument
                        if (serviceProviderTypeArg.Value is INamedTypeSymbol typeValue)
                        {
                            // First check ContainingNamespace is not empty/null
                            string ns = typeValue.ContainingNamespace?.ToDisplayString();
                            if (!string.IsNullOrEmpty(ns))
                            {
                                fullyQualifiedName = $"global::{ns}.{typeValue.Name}";
                            }
                            else
                            {
                                // Fallback to regular FullyQualifiedFormat
                                fullyQualifiedName = typeValue.ToDisplayString(format);
                            }
                        }
                        else if (testServiceProviderAttr.ConstructorArguments.Length == 1 &&
                                 testServiceProviderAttr.ConstructorArguments[0].Value is INamedTypeSymbol ctorTypeValue)
                        {
                            fullyQualifiedName = ctorTypeValue.ToDisplayString(format);
                        }
                    }

                    var assemblyName = (compilation.AssemblyName ?? "UnknownAssembly").Replace('.', '_');

                    var source = $@"// <auto-generated />
using System;
using System.Runtime.CompilerServices;

namespace Gandalf.Engine.Helpers
{{
    public static class TestServiceProviderFactory_{assemblyName}
    {{
        [ModuleInitializer]
        public static void Initialize()
        {{
            TestServiceProvider.SetAssemblyServiceProvider(CreateInternal());
        }}

        private static object CreateInternal()
        {{
            return {(fullyQualifiedName != null ? $"new {fullyQualifiedName}()" : "null")};
        }}
    }}
}}
";
                    spc.AddSource($"TestServiceProviderFactory_{assemblyName}.g.cs", SourceText.From(source, Encoding.UTF8));
                });
        }
    }
}