using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace Gandalf.Engine.SourceGenerators
{
    [Generator]
    public class TestMethodSourceGenerator : IIncrementalGenerator
    {
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
            var methodDeclarations = context.SyntaxProvider
                .CreateSyntaxProvider(
                    predicate: (node, _) => node is MethodDeclarationSyntax,
                    transform: (ctx, _) => (MethodDeclarationSyntax)ctx.Node)
                .Where(m => m != null);

            var compilationAndMethods = context.CompilationProvider.Combine(methodDeclarations.Collect());

            context.RegisterSourceOutput(compilationAndMethods, (spc, source) =>
            {
                var (compilation, methods) = source;

                foreach (var method in methods)
                {
                    var semanticModel = compilation.GetSemanticModel(method.SyntaxTree);
                    var symbol = semanticModel.GetDeclaredSymbol(method);
                    if (symbol == null)
                        continue;

                    if (!HasTestAttribute(symbol))
                        continue;

                    var classSymbol = symbol.ContainingType;
                    var ns = classSymbol.ContainingNamespace.ToDisplayString();
                    var assembly = classSymbol.ContainingAssembly.Name;
                    var cls = classSymbol.Name;
                    var methodName = symbol.Name;

                    var filePath = method.SyntaxTree.FilePath;
                    var (startLine, startCharacter, endLine, endCharacter) = GetLineInfo(method);

                    var fqType = string.IsNullOrEmpty(ns) ? cls : $"{ns}.{cls}";

                    var argumentAttributes = symbol.GetAttributes()
                        .Where(attr => attr.AttributeClass?.Name == "ArgumentAttribute")
                        .ToList();

                    var registrations = argumentAttributes.Count == 0
                        ? GenerateStandardTestRegistration(symbol, fqType, ns, cls, methodName, assembly, filePath, startLine, startCharacter, endLine, endCharacter)
                        : GenerateParameterizedTestRegistrations(symbol, argumentAttributes, fqType, ns, cls, methodName, assembly, filePath, startLine, startCharacter, endLine, endCharacter);

                    var safeNamespace = assembly;
                    var safeClassName = $"{cls}_{methodName}_DiscoveredTest";
                    var registrationBlock = string.Join("\n            ", registrations);

                    var code =
$@"// <auto-generated />
using System;
using System.Runtime.CompilerServices;
using Gandalf.Core.Helpers;
using Gandalf.Core.Models;

namespace {safeNamespace}
{{
    public static class {safeClassName}
    {{
        [ModuleInitializer]
        public static void Initialize()
        {{
            {registrationBlock}
        }}
    }}
}}";
                    var fileName = $"{assembly}.{cls}.{methodName}.DiscoveredTest.g.cs";
                    spc.AddSource(fileName, code);
                }
            });
        }

        private static bool HasTestAttribute(IMethodSymbol symbol) =>
            symbol.GetAttributes().Any(attr => attr.AttributeClass?.ToDisplayString() == "Gandalf.Core.Attributes.TestAttribute");

        private static (int startLine, int startCharacter, int endLine, int endCharacter) GetLineInfo(MethodDeclarationSyntax method)
        {
            var location = method.Identifier.GetLocation();
            var lineSpan = location.GetLineSpan();
            return (
                lineSpan.StartLinePosition.Line + 1,
                lineSpan.StartLinePosition.Character + 1,
                lineSpan.EndLinePosition.Line + 1,
                lineSpan.EndLinePosition.Character + 1
            );
        }

        private static List<string> GenerateStandardTestRegistration(
            IMethodSymbol symbol, string fqType, string ns, string cls, string methodName,
            string assembly, string filePath, int startLine, int startCharacter, int endLine, int endCharacter)
        {
            var testUid = $"{ns}.{cls}.{methodName}";
            var callArguments = BuildCallArguments(symbol.Parameters);
            var callArgsString = string.Join(", ", callArguments);
            var c = $"() => new {fqType}().{methodName}({callArgsString})";
            return new List<string>
            {
                $"DiscoveredTests.Register(new DiscoveredTest(\"{testUid}\", \"{assembly}\", \"{ns}\", \"{cls}\", \"{methodName}\", {c}, \"{filePath}\", {startLine}, {startCharacter}, {endLine}, {endCharacter}));"
            };
        }

        private static List<string> GenerateParameterizedTestRegistrations(
            IMethodSymbol symbol, List<AttributeData> argumentAttributes, string fqType, string ns, string cls, string methodName,
            string assembly, string filePath, int startLine, int startCharacter, int endLine, int endCharacter)
        {
            var registrations = new List<string>();
            var parameters = symbol.Parameters.ToList();
            var parentUid = $"{ns}.{cls}.{methodName}";
            int count = 0;

            foreach (var argAttr in argumentAttributes)
            {
                var args = argAttr.ConstructorArguments.FirstOrDefault();
                var argList = args.Values.Select(v =>
                    v.Kind == TypedConstantKind.Primitive
                        ? v.Value is string s ? $"\"{s}\"" : v.Value?.ToString() ?? "null"
                        : v.ToCSharpString()
                ).ToArray();

                var callArguments = BuildCallArguments(parameters, argList);
                var callArgsString = string.Join(", ", callArguments);
                var c = $"() => new {fqType}().{methodName}({callArgsString})";
                var childUid = $"{ns}.{cls}.{methodName}-{count}";
                var argString = string.Join(", ", argList);

                registrations.Add(
                    $"DiscoveredTests.Register(new DiscoveredTest(\"{childUid}\", \"{assembly}\", \"{ns}\", \"{cls}\", \"{methodName}\", {c}, \"{filePath}\", {startLine}, {startCharacter}, {endLine}, {endCharacter}, new object[] {{ {argString} }}, \"{parentUid}\"));"
                );
                count++;
            }

            return registrations;
        }

        private static List<string> BuildCallArguments(IEnumerable<IParameterSymbol> parameters, string[] argList = null)
        {
            var callArguments = new List<string>();
            int argIndex = 0;
            foreach (var param in parameters)
            {
                bool isInject = param.GetAttributes()
                    .Any(attr => attr.AttributeClass?.ToDisplayString() == "Gandalf.Core.Attributes.InjectAttribute");

                if (isInject)
                {
                    // var paramType = param.Type.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat);
                    // callArguments.Add($"({param.Type.ToDisplayString()})Gandalf.Engine.Helpers.TestServiceProvider.GetAssemblyServiceProvider().GetService(typeof({paramType}))");
                }
                else if (argList != null)
                {
                    callArguments.Add(argList[argIndex]);
                    argIndex++;
                }
                else
                {
                    callArguments.Add(param.HasExplicitDefaultValue
                        ? (param.ExplicitDefaultValue is string s ? $"\"{s}\"" : param.ExplicitDefaultValue?.ToString() ?? "null")
                        : "default");
                }
            }
            return callArguments;
        }
    }
}
